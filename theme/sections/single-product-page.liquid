{{ 'single-product.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign min_aspect_ratio = 0.6
  assign current_variant = product.selected_or_first_available_variant

  unless product.has_only_default_variant
    for block in section.blocks
      if block.type == 'product-variant-picker' and block.settings.select_first_variant == false and product.variants.size > 1
        assign current_variant = product.selected_variant | default: false
      endif
    endfor
  endunless

  assign product_form_id = 'product-form-' | append: section.id | append: '-' | append: product.id
-%}

{%- liquid
  assign min_aspect_ratio = 0.6
  assign current_variant = product.selected_or_first_available_variant
  assign size_guide_text = ''
  assign enable_size_chart = false

  unless product.has_only_default_variant
    for block in section.blocks
      if block.type == 'product-variant-picker'
        assign size_guide_text = block.settings.size_guide_text
        if block.settings.size_guide_page != blank
          assign enable_size_chart = true
        endif
        if block.settings.select_first_variant == false and product.variants.size > 1
          assign current_variant = product.selected_variant | default: false
        endif
      endif

    endfor
  endunless

  assign product_form_id = 'product-form-' | append: section.id | append: '-' | append: product.id
-%}

{% if enable_size_chart %}
  {{ 'size-guide.css' | asset_url | stylesheet_tag }}
{% endif %}

{%- if product.media.size > 1 -%}
  <script src="{{ 'slideshow.js' | asset_url }}" defer></script>
{%- endif -%}
<link rel="stylesheet" href="{{ 'modal.css' | asset_url }}">

<script>
  var productData = {
    "productId": "{{ product.id }}",
    "variants": [
      {% for variant in product.variants %}
      {
        "id": {{ variant.id }},
        "options": [
          {% for option in variant.options %}
          "{{ option }}"{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        "price": {{ variant.price }},
        "available": {{ variant.available | json }},
        "featured_image": {
          "src": "{{ variant.featured_image.src | img_url: 'master' }}",
          "alt": "{{ variant.featured_image.alt }}"
        }
      }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ],
    "options": [
      {% for option in product.options %}
      "{{ option }}"{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ]
  };
</script>

<single-product>
  <product-form class="js-product product-info quickbuy-content spaced-row">
    <media-gallery
      class="media-gallery media-gallery--layout-collage-3 media-gallery-size-medium product-column-left {% if product.media.size > 1 %}has-thumbnails{% endif %}"
      data-cc-animate
      data-cc-animate-delay="0.2s"
    >
      <div class="media-gallery__inner{% if section.settings.enable_sticky_columns %} sticky-content-container{% endif %}">
        <div class="main-image">
          <carousel-slider class="mobile-only" role="region" aria-roledescription="{{ 'sections.slideshow.carousel' | t }}" aria-label="{{ section.settings.accessibility_info | escape }}" data-dynamic-height="true" data-dispatch-events="true">
            <div class="slider slider--no-scrollbar" id="slider-{{ section.id }}" aria-live="polite" aria-atomic="true">
              <div class="slider__grid">
                {%- for media in product.media -%}
                  <div
                    class="slider__item{% if forloop.index0 == initial_slide %} is-active{% endif %}"
                    role="group" aria-roledescription="{{ 'sections.slideshow.slide' | t }}"
                    aria-label="{{ forloop.index }} {{ 'general.slider.of' | t }} {{ forloop.length }}"
                    {%- unless forloop.index0 == initial_slide %} tabindex="-1"{% endunless %}
                    {%- if request.design_mode %} data-index="{{ forloop.index0 }}"{% endif %}
                    data-media-id="{{ media.id }}"
                  >
                    {%- liquid
                      if forloop.index0 == initial_slide
                        assign loading = 'eager'
                      else
                        assign loading = 'lazy'
                      endif

                      render 'media', media: media, product: product, min_aspect_ratio: min_aspect_ratio, loading: loading
                    -%}
                  </div>
                {%- endfor -%}
              </div>
            </div>

            {%- if product.media.size > 1 -%}
              <div class="slider-nav slider-nav--floating mobile-only js-only">
                <button type="button" class="slider-nav__btn slider-nav__btn--style-2" name="prev" aria-controls="slider-{{ section.id }}">
                  <span class="visually-hidden">{{ 'general.slider.previous' | t }}</span>
                  {% render 'icon-chevron-left' %}
                </button>

                <button type="button" class="slider-nav__btn slider-nav__btn--style-2" name="next" aria-controls="slider-{{ section.id }}">
                  <span class="visually-hidden">{{ 'general.slider.next' | t }}</span>
                  {% render 'icon-chevron-right' %}
                </button>
              </div>
            {%- endif -%}
          </carousel-slider>

          <div class="product-media-collage desktop-only">
            {%- for media in product.media -%}
              <div
                class="product-media-collage__item{% if forloop.index0 == initial_slide %} is-active{% endif %}"
                data-media-id="{{ media.id }}"
              >
                {%- liquid
                  if forloop.index < 4
                    assign loading = 'eager'
                  else
                    assign loading = 'lazy'
                  endif

                  render 'media', media: media, product: product, min_aspect_ratio: min_aspect_ratio, loading: loading, in_collage: true
                -%}
              </div>
            {%- endfor -%}
          </div>
        </div>
      </div>
    </media-gallery>

    <div class="detail product-column-right" data-cc-animate data-cc-animate-delay="0.2s">
      <div class="product-form{% if section.settings.enable_sticky_columns %} sticky-content-container{% endif %}" data-ajax-add-to-cart="true" data-product-id="{{ product.id }}">
        <div class="product-type">Styles > {{ product.type }}</div>
        {% for block in section.blocks %}
          {% case block.type %}
            {% when '@app' %}
              <div class="{% unless settings.qb_show_app_blocks %}not-in-quickbuy{% endunless %}">
                {% render block %}
              </div>

            {% when 'title' %}
              <div class="title-row" {{ block.shopify_attributes }}>
              <div class="title-container">
              <h5 class="product-title">{{ product.title | escape }}</h5>

            {% when 'price' %}
              <span class="price__current">{{ product.price | money_without_trailing_zeros }}</span>
              </div>
              </div>

            {% when 'product-variant-picker' %}
              {% render 'product-variant-picker',
                product: product,
                product_form_id: product_form_id,
                block: block,
                size_chart_icon: size_chart_icon,
                media_ratio: 1,
                swatch_crop: settings.swatch_crop_align,
                dynamic_availability_mode: 'down',
                enable_size_chart: enable_size_chart,
                size_guide_text: size_guide_text,
                size_guide_page: block.settings.size_guide_page
              %}

            {% when 'buy-buttons' %}
              <buy-buttons class="buy-buttons-row block" {{ block.shopify_attributes }}>
                {% form 'product', product, id: product_form_id, class: 'form js-product-form', data-product-id: product.id %}
                  <input type="hidden" name="id" value="{{ current_variant.id }}" disabled>

                  {% if product.available %}
                    {%- liquid
                      assign gift_card_recipient_feature_active = false
                      if block.settings.show_gift_card_recipient and product.gift_card?
                        assign gift_card_recipient_feature_active = true
                      endif

                      assign enable_dynamic_payment_button = false
                      if block.settings.enable_payment_button and product.selling_plan_groups == empty and gift_card_recipient_feature_active == false
                        unless product.template_suffix contains 'preorder'
                          assign enable_dynamic_payment_button = true
                        endunless
                      endif
                    -%}

                    {% if gift_card_recipient_feature_active %}
                      {% render 'gift-card-recipient', section: section %}
                    {% endif %}

                    <div class="quantity-submit-row input-row {% if enable_dynamic_payment_button %}has-spb{% endif %}">
                      {% if block.settings.show_quantity_selector %}
                        <label class="label" for="quantity">{{ 'products.product.quantity' | t }}</label>
                        <quantity-wrapper class="quantity-wrapper">
                          <a href="#" data-quantity="down" aria-label="{{ 'cart.items.decrease_quantity' | t }}">{% render 'icon-minus' %}</a>
                          <input aria-label="{{ 'products.product.quantity' | t }}" id="quantity" type="number" name="quantity" value="1" />
                          <a href="#" data-quantity="up" aria-label="{{ 'cart.items.increase_quantity' | t }}">{% render 'icon-plus' %}</a>
                        </quantity-wrapper>
                      {% endif %}

                      <div class="quantity-submit-row__submit input-row">
                        <div class="js-form-error lightly-spaced-row" role="alert" hidden></div>

                        {%- capture add_to_cart_text -%}
                          {%- if product.template_suffix contains 'preorder' -%}
                            {{- 'products.product.preorder' | t -}}
                          {%- else -%}
                            {{- 'products.product.add_to_cart' | t -}}
                          {%- endif -%}
                        {%- endcapture -%}
                        <button class="btn btn--large add-to-cart" type="submit" name="add" data-add-to-cart-text="{{ add_to_cart_text | escape }}"{% if product.available == false %} disabled{% endif %}>
                          {%- if current_variant.available or current_variant == false -%}
                            {{- add_to_cart_text -}}
                          {%- else -%}
                            {{- 'products.variant.no_stock' | t -}}
                          {%- endif -%}
                        </button>
                      </div>
                      <!-- Add to Wishlist Button -->
                      <button class="btn btn--large add-to-wishlist" type="button" name="add_to_wishlist">
                        {% render 'icon-heart' %}
                        Add to wishlist
                      </button>
                      {% if enable_dynamic_payment_button %}
                        <script class="dynamic-payment-button-template" type="text/template">
                          {{ form | payment_button }}
                        </script>
                      {% endif %}

                      {% if block.settings.show_backorder_text %}
                        {% render 'backorder', product: product, variant: current_variant %}
                      {% endif %}
                    </div>

                  {% else %}
                    <div class="quantity-submit-row input-row">
                      <div class="quantity-submit-row__submit">
                        <button class="btn btn--large" name="add" type="submit" disabled>
                          {{- 'products.variant.no_stock' | t -}}
                        </button>
                      </div>
                    </div>
                  {% endif %}
                {% endform %}

                {%- if product.available and block.settings.show_pickup_availability -%}
                  {% render 'pickup-availability', current_variant: current_variant %}
                {%- endif -%}
              </buy-buttons>

            {% when 'divider' %}
              <hr class="not-in-quickbuy" {{ block.shopify_attributes }}>
          {% endcase %}
        {% endfor %}

        <div class="lightish-spaced-row-above only-in-quickbuy">
          <a class="more" href="{{ product.url }}">
            <span class="beside-svg underline">{{ 'products.product.view_details' | t }}</span>
            <span class="icon--small icon-natcol has-ltr-icon">{% render 'icon-chevron-right' %}</span>
          </a>
        </div>
      </div>

      <div class="product-recommendations" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related">
        {%- if recommendations.performed? and recommendations.products_count > 0 -%}
          {% if recommendations.intent == 'related' %}
            <h4>Style With:</h4>
          {% elsif recommendations.intent == 'complementary' %}
            <h4>Pair it with:</h4>
          {% endif %}

        <div class="recommendations-grid">
          <ul class="recommendations-list">
            {%- for product in recommendations.products -%}
              <li class="product" data-product-id="{{ product.id }}" data-collection-item>
                <div class="product__quick-add-panel" data-quick-add-panel>
                  <div class="product__size-variants">
                    {% for option in product.options_with_values %}
                      {% assign option_name = option.name | downcase %}
                      {% if option_name == 'size' %}
                        {% assign is_first_size = true %}
                        {% for value in option.values %}
                          {% assign variant_id = '' %}
                          {% assign product_color = product.featured_image.alt %}

                          {% for variant in product.variants %}
                            {% assign available = variant.available %}
                            {% if variant.featured_image.alt == product_color %}
                              {% for option in variant.options %}
                                {% if option == value %}
                                  {% assign variant_id = variant.id %}
                                {% endif %}
                              {% endfor %}
                            {% endif %}
                          {% endfor %}
                          <div
                                  data-variant-id="{{ variant_id }}"
                                  data-variant-size="{{ value }}"
                                  class="product__size-variant-text no-select
                                {% if is_first_size %}
                                    product__size-variant-text_selected
                                    {% assign is_first_size = false %}
                                {% endif %}
                            "
                          >
                            {{ value }}
                          </div>
                        {% endfor %}
                      {% endif %}
                    {% endfor %}
                  </div>
                  <div class="product__add-to-cart no-select">{% if available %}Add to bag{% else %}Preorder{% endif %}</div>
                </div>
                <a href="{{ product.url }}">
                  <img class="product__img" src="{{ product.featured_image | image_url: width: 300, height: 300 }}" alt="{{ product.featured_image.alt }}" loading="lazy">
                  <p class="product__title">{{ product.title }}</p>
                  <p class="product__price">{{ product.price | money_without_trailing_zeros }}</p>
                </a>
              </li>
            {%- endfor -%}
          </ul>
          <button class="show-more-btn">See More</button>
        </div>
      {%- endif -%}
    </div>

      <hr class="not-in-quickbuy recommendations-devider" {{ block.shopify_attributes }}>
      {%- if product.description != blank -%}
        <div class="product-details product-details_first" data-product-details>
          <div class="product-details__header">
            <h4 class="product-details__title no-select">{{ settings.details_title_text }}</h4>
            <div class="product-details__btn" data-plus-button>
              {% render 'icon-plus', fill: '#2B2B2B', stroke: '#2B2B2B' %}
            </div>
            <div class="product-details__btn disp-none-imp" data-minus-button>
              {% render 'icon-minus', fill: '#2B2B2B', stroke: '#2B2B2B' %}
            </div>
          </div>
          <div class="product-details__content">
            {{ product.description }}
          </div>
        </div>
        <div class="product-details" data-product-size-and-info>
          <div class="product-details__header">
            <h4 class="product-details__title no-select">{{ settings.size_fit_information_title_text }}</h4>
            <div class="product-details__btn" data-plus-button>
              {% render 'icon-plus', fill: '#2B2B2B', stroke: '#2B2B2B' %}
            </div>
            <div class="product-details__btn disp-none-imp" data-minus-button>
              {% render 'icon-minus', fill: '#2B2B2B', stroke: '#2B2B2B' %}
            </div>
          </div>
          <div class="product-details__content">
            {{ product.metafields.custom.size_fit_information.value }}
          </div>
        </div>
      {%- endif -%}

      {% javascript %}
        const handleIntersection = (entries, observer) => {
          if (!entries[0].isIntersecting) return;

          observer.unobserve(productRecommendationsSection);

          const url = productRecommendationsSection.dataset.url;

          fetch(url)
            .then(response => response.text())
            .then(text => {
              const html = document.createElement('div');
              html.innerHTML = text;
              const recommendations = html.querySelector('.product-recommendations');

              if (recommendations && recommendations.innerHTML.trim().length) {
                productRecommendationsSection.innerHTML = recommendations.innerHTML;
                addShowMoreFunctionality();
              }
            })
            .catch(e => {
              console.error(e);
            });
        };

        const productRecommendationsSection = document.querySelector('.product-recommendations');
        const observer = new IntersectionObserver(handleIntersection, {
          rootMargin: '0px 0px 200px 0px'
        });

        observer.observe(productRecommendationsSection);

        function addShowMoreFunctionality() {
          const recommendationsList = document.querySelector('.recommendations-list');
          const showMoreBtn = document.querySelector('.show-more-btn');
          const products = recommendationsList.querySelectorAll('.product');

          products.forEach((product, index) => {
            if (index >= 2) {
              product.classList.add('hidden');
            }
          });

          let hiddenProducts = Array.from(products).slice(2);

          showMoreBtn.addEventListener('click', () => {
            hiddenProducts.forEach((product, index) => {
              if (index < 2) {
                product.classList.remove('hidden');
              }
            });

            hiddenProducts = hiddenProducts.slice(2);

            if (hiddenProducts.length === 0) {
              showMoreBtn.style.display = 'none';
            }
          });
        }
      {% endjavascript %}
    </div>

    {%- render 'product-popups', product: product -%}

    {%- render 'structured-data-product', product: product, current_variant: product.selected_or_first_available_variant -%}
  </product-form>
</single-product>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const MAX_PRODUCT_AMOUNT = 7

    const addProductToLocalStorage = (product, productArray, maxProductAmount) => {
      const filteredArray = productArray.filter(el => (el.productId !== product.productId) || (el.variantId !== product.variantId))
      while (filteredArray.length >= maxProductAmount) {
        filteredArray.pop()
      }
      filteredArray.splice(0, 0, product);

      const products = JSON.stringify(filteredArray)
      localStorage.setItem("recently_viewed_products", `${products}`)
    };

    const getProductsFromLocalStorage = () => {
      if (localStorage.getItem("recently_viewed_products")) {
        const productsString = localStorage.getItem("recently_viewed_products")
        const products = JSON.parse(productsString)

        return products
      }

      return []
    }

    const getCurrentVariantId = () => {
      const url = window.location.href
      const urlArray = url.split('variant=')

      if (urlArray.length === 2) {
        return urlArray[1]
      }

      return ''
    }

    const initializeProductObject = () => {
      const productObject = {
        "productId": "",
        "variantId": "",
        "title": "",
        "url": "",
        "color": "",
        "size": "",
        "price": "",
        "inventory_quantity": "",
        "images": [],
        "variantSizes": [],
        "variantAvailableFrom": '',
      }

      {% assign productTitle = product.title %}
      productObject.title = `{{ productTitle }}`
      {% assign productId = product.id %}
      productObject.productId = `{{ productId }}`

      let currentVariantId = getCurrentVariantId()
      if (!currentVariantId) {
        currentVariantId = `{{ product.first_available_variant.id }}`
      }

      {% for variant in product.variants %}
      if (currentVariantId === `{{ variant.id }}`) {
        productObject.variantId = `{{ variant.id }}`
        productObject.variantAvailableFrom = `{{ variant.metafields.custom.available_from | date: "%B %d, %Y" }}`
        productObject.url = `{{ variant.url }}`
        productObject.price = `{{ variant.price | money_without_trailing_zeros }}`
        productObject.inventory_quantity = `{{ variant.inventory_quantity }}`
        {% for option in variant.options %}
        {% if forloop.index0 == 0 %}
        productObject.color = `{{ option }}`
        {% elsif forloop.index0 == 1 %}
        productObject.size = `{{ option }}`
        {% endif %}
        {% endfor %}
      }
      {% for option in variant.options %}
      {% if forloop.index0 == 1 %}
      if (!productObject.variantSizes.includes(`{{ option }}`)) {
        productObject.variantSizes.push(`{{ option }}`)
      }
      {% endif %}
      {% endfor %}
      {% endfor %}

      let imageLimit = 2
      {% for image in product.images %}
      if (imageLimit > 0 && productObject.color.toUpperCase() === `{{ image.alt }}`.toUpperCase()) {
        const imageObject = {
          "src": `{{ image.src | image_url }}`,
          "alt": `{{ image.alt }}`,
          "mediaType": `{{ image.media_type }}`,
          "productId": `{{ image.product_id }}`
        }
        productObject.images.push(imageObject)
        imageLimit--
      }
      {% endfor %}

      return productObject
    }

    const updateProductsInStorage = () => {
      const productObject = initializeProductObject()
      const recentProducts = getProductsFromLocalStorage()
      addProductToLocalStorage(productObject, recentProducts, MAX_PRODUCT_AMOUNT)
    }

    setTimeout(() => {
      updateProductsInStorage()
    }, 500)

    const colorSwatchButtons = document.querySelectorAll('.opt-label.opt-label--swatch')
    for (const button of colorSwatchButtons) {
      button.addEventListener("click", () => {
        setTimeout(() => {
          updateProductsInStorage()
        }, 500)
      })
    }

    const sizeSwatchButtons = document.querySelectorAll('.opt-label.opt-label--btn')
    for (const button of sizeSwatchButtons) {
      button.addEventListener("click", () => {
        setTimeout(() => {
          updateProductsInStorage()
        }, 500)
      })
    }
  })
</script>

{{ 'single-product-script.js' | asset_url | script_tag }}
{{ 'size-guide-chart.js' | asset_url | script_tag }}

{% schema %}
{
  "name": "Single product page",
  "class": "section-main-product page-section-spacing page-section-spacing--no-top-mobile",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_sticky_columns",
      "label": "Enable stick on scroll",
      "default": false
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1
    },
    {
      "type": "price",
      "name": "Price",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_tax_and_shipping",
          "label": "Show tax status and shipping policy link",
          "default": false
        },
        {
          "type": "checkbox",
          "label": "Show product rating",
          "id": "enable_product_reviews_by_price",
          "info": "Add reviews by installing [an app](https://apps.shopify.com/search?q=reviews). App must support Shopify's standard rating metafield.",
          "default": true
        }
      ]
    },
    {
      "type": "product-variant-picker",
      "name": "Product variant picker",
      "settings": [
        {
          "type": "checkbox",
          "id": "show_single",
          "label": "Show for a single variant",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "select_first_variant",
          "label": "Select first available variant",
          "default": true
        },
        {
          "type": "select",
          "id": "selector_style",
          "label": "Variant style",
          "options": [
            {
              "value": "listed",
              "label": "Buttons"
            },
            {
              "value": "dropdown",
              "label": "Dropdown"
            }
          ],
          "default": "listed"
        },
        {
          "type": "checkbox",
          "id": "enable_dynamic_availability",
          "label": "Show availability in selectors",
          "info": "When an option is selected, options below it are updated to show their availability",
          "default": true
        },
        {
          "type": "text",
          "id": "size_chart_variant",
          "label": "Option name",
          "info": "The label to show the link beside",
          "default": "Size"
        },
        {
          "type": "header",
          "content": "Size chart"
        },
        {
          "type": "text",
          "id": "size_guide_text",
          "label": "Size guide button text",
          "default": "View Size Guide"
        },
        {
          "type": "page",
          "id": "size_guide_page",
          "label": "Page containing size chart"
        }
      ],
      "limit": 1
    },
    {
      "type": "buy-buttons",
      "name": "Buy buttons",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_quantity_selector",
          "label": "Show quantity selector",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "enable_payment_button",
          "label": "Show dynamic checkout button",
          "info": "Each customer will see their preferred payment method from those available on your store, such as PayPal or Apple Pay. [Learn more](https://help.shopify.com/manual/using-themes/change-the-layout/dynamic-checkout)",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_backorder_text",
          "label": "Show backorder text",
          "default": false,
          "info": "Only shows for products which use Shopify inventory tracking and are available to purchase when out of stock."
        },
        {
          "type": "checkbox",
          "id": "show_pickup_availability",
          "label": "Show pickup availability",
          "default": true,
          "info": "Show customers where they can pick up the product. [Learn more](https://help.shopify.com/en/manual/shipping/setting-up-and-managing-your-shipping/local-methods/local-pickup)"
        },
        {
          "type": "checkbox",
          "id": "show_gift_card_recipient",
          "default": false,
          "label": "Show recipient information form for gift cards",
          "info": "Allow customers to send gift cards to a recipient along with a personal message. When enabled, the dynamic checkout button will be disabled for gift cards. [Learn more](https://help.shopify.com/manual/online-store/themes/customizing-themes/add-gift-card-recipient-fields)"
        }
      ]
    },
    {
      "type": "divider",
      "name": "Divider",
      "settings": []
    }
  ]
}
{% endschema %}
