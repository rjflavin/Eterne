{%- comment -%}
  Info: This snipped must be added to a section on product page for every template (to save all visited products)
  Parameters:
  - product {Object} - Product object.

  Usage:
  {% render 'save-recenlty-viewed-products', product: product %}
{%- endcomment -%}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const MAX_PRODUCT_AMOUNT = 7

        const addProductToLocalStorage = (product, productArray, maxProductAmount) => {
            const filteredArray = productArray.filter(el => (el.productId !== product.productId) || (el.variantId !== product.variantId))
            while (filteredArray.length >= maxProductAmount) {
                filteredArray.pop()
            }
            filteredArray.splice(0, 0, product);

            const products = JSON.stringify(filteredArray)
            localStorage.setItem("recently_viewed_products", `${products}`)
        };

        const getProductsFromLocalStorage = () => {
            if (localStorage.getItem("recently_viewed_products")) {
                const productsString = localStorage.getItem("recently_viewed_products")
                const products = JSON.parse(productsString)

                return products
            }

            return []
        }

        const initializeProductObject = () => {
            const productObject = {
                "productId": "",
                "title": "",
                "color": "",
                "inventory_quantity": "",
                "images": [],
                "variants": [],
            }

            {% assign productTitle = product.title %}
            productObject.title = `{{ productTitle }}`
            {% assign productId = product.id %}
            productObject.productId = `{{ productId }}`

            let currentVariantId = {{ product.selected_or_first_available_variant | json }}
            console.log('selected product: ', currentVariantId);
            if (!currentVariantId) {
                currentVariantId = `{{ product.first_available_variant.id }}`
            }

            {% for variant in product.variants %}
            if (currentVariantId === `{{ variant.id }}`) {
                productObject.variantId = `{{ variant.id }}`
                productObject.variantAvailableFrom = `{{ variant.metafields.custom.available_from | date: "%B %d, %Y" }}`
                productObject.url = `{{ variant.url }}`
                productObject.price = `{{ variant.price | money_without_trailing_zeros }}`
                productObject.inventory_quantity = `{{ variant.inventory_quantity }}`
                {% for option in variant.options %}
                {% if forloop.index0 == 0 %}
                productObject.color = `{{ option }}`
                {% elsif forloop.index0 == 1 %}
                productObject.size = `{{ option }}`
                {% endif %}
                {% endfor %}
            }
            {% for option in variant.options %}
            {% if forloop.index0 == 1 %}
            if (!productObject.variantSizes.includes(`{{ option }}`)) {
                productObject.variantSizes.push(`{{ option }}`)
            }
            {% endif %}
            {% endfor %}
            {% endfor %}

            let imageLimit = 2
            {% for image in product.images %}
            if (imageLimit > 0 && productObject.color.toUpperCase() === `{{ image.alt }}`.toUpperCase()) {
                const imageObject = {
                    "src": `{{ image.src | image_url }}`,
                    "alt": `{{ image.alt }}`,
                    "mediaType": `{{ image.media_type }}`,
                    "productId": `{{ image.product_id }}`
                }
                productObject.images.push(imageObject)
                imageLimit--
            }
            {% endfor %}

            return productObject
        }

        const updateProductsInStorage = () => {
            const productObject = initializeProductObject()
            const recentProducts = getProductsFromLocalStorage()
            addProductToLocalStorage(productObject, recentProducts, MAX_PRODUCT_AMOUNT)
        }

        setTimeout(() => {
            updateProductsInStorage()
        }, 500)

        const colorSwatchButtons = document.querySelectorAll('.opt-label.opt-label--swatch')
        for (const button of colorSwatchButtons) {
            button.addEventListener("click", () => {
                setTimeout(() => {
                    updateProductsInStorage()
                }, 500)
            })
        }

        const sizeSwatchButtons = document.querySelectorAll('.opt-label.opt-label--btn')
        for (const button of sizeSwatchButtons) {
            button.addEventListener("click", () => {
                setTimeout(() => {
                    updateProductsInStorage()
                }, 500)
            })
        }
    })
</script>