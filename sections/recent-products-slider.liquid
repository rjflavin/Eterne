{{ 'recent-products-slider.css' | asset_url | stylesheet_tag }}

<div class="recent-products-slider">
  {% if section.settings.title %}
    <div class="recent-products-slider-title">
      {{ section.settings.title }}
    </div>
  {% endif %}

  <div class="recent-products-swiper">
    <div class="recent-products__swiper-wrapper swiper-wrapper">

    </div>
    <div class="recent-products-swiper-button-prev">
      <img src="{{ 'recent-products-arrow-left.png' | asset_img_url }}" loading="lazy">
    </div>
    <div class="recent-products-swiper-button-next">
      <img src="{{ 'recent-products-arrow-right.png' | asset_img_url }}" loading="lazy">
    </div>
  </div>

  <script defer>
  document.addEventListener("DOMContentLoaded", () => {
    const getProductsFromLocalStorage = () => {
      const productsString = localStorage.getItem('recently_viewed_products');

      if (productsString) {
        const isProductPreordered = '{{ product.tags | downcase }}'.includes('preorder');
        const productsFromLS = JSON.parse(productsString);
        const productsIds = productsFromLS.map((product) => product.productId);
        const productsIdsString = productsIds.join(',');

        /* Updating products with actual data */
        let updatedProductsFromLS = [];

        {% paginate collections.all.products by 1000 %}
          {% for product in collections.all.products  %}
            if (productsIdsString.includes('{{ product.id }}')) {
              let productOrder;
              const productFromLS = productsFromLS.find((product, index) => {
                productOrder = index;
                return product.productId === '{{ product.id }}'
              });
              const productObject = {
                order: productOrder,
                ...productFromLS,
                availableFrom: "",
                variants: [],

              };
                productObject.availableFrom = `{{ product.metafields.custom.available_from | date: "%B %d, %Y" }}`;
                productObject.isPreordered = isProductPreordered;

              const isFloat = (n) =>{
                return Number(n) === n && n % 1 !== 0;
              }

              let variants = [],
                      loopVariant,
                      variantPrice,
                      variantPriceCleaned;

              {% for variant in product.variants %}
                variantPrice = '{{ variant.price }}';
                variantPriceCleaned = parseFloat(variantPrice * 0.01);

                loopVariant = {
                  available: (+'{{ variant.inventory_quantity }}' > 0),
                  compare_at_price: +'{{ variant.compare_at_price }}',
                  id: +'{{ variant.id | escape }}',
                  inventory_quantity: +'{{ variant.inventory_quantity | escape }}',
                  option1: '{{ variant.option1 | escape }}',
                  option2: '{{ variant.option2 | escape }}',
                  option3: '{{ variant.option3 | escape }}',
                  options: JSON.parse('{{ variant.options | json }}'),
                  price: (isFloat(variantPriceCleaned)) ? variantPriceCleaned.toFixed(2) : parseInt(variantPriceCleaned, 10),
                  title: '{{ variant.title | escape }}',
                  url: '{{ variant.url | escape }}',
                  inventory_policy: '{{ variant.inventory_policy | escape }}',
                }
                variants.push(loopVariant);
              {% endfor %}

              let firstAvailable = false;
              let firstAvailableFound = false;
              productObject.variants = variants.map((variantData) => {
                if (variantData.available && !firstAvailable && !firstAvailableFound) {
                  firstAvailable = true;
                  firstAvailableFound = true;
                } else firstAvailable = false;

                const { id, available, price, url, inventory_policy, inventory_quantity, title } = variantData;
                return {
                  id,
                  available,
                  size: variantData.option2,
                  price,
                  url,
                  firstAvailable,
                  inventoryPolicy: inventory_policy,
                  inventoryQuantity: inventory_quantity,
                  title,
                };
              })
              updatedProductsFromLS.push(productObject);
            }
          {% endfor %}
        {% endpaginate %}

        updatedProductsFromLS.sort((a, b) => a.order - b.order);

        return updatedProductsFromLS;
      }
      return [];
    };

    const setUpSlides = (products) => {
      const MAX_PRODUCT_AMOUNT = 4
      const slider = document.querySelector('.section-recent-products-slider')
      if (slider && products.length <= MAX_PRODUCT_AMOUNT && products.length > 0) {
        const leftArrow = document.querySelector('.recent-products-swiper-button-prev')
        const rightArrow = document.querySelector('.recent-products-swiper-button-next')
        if (leftArrow && rightArrow) {
          leftArrow.classList.add('hide')
          rightArrow.classList.add('hide')
        }
      }

      if (products.length <= 0) {
        slider.classList.add('hide')
        return
      }

      const wrapper = document.querySelector('.recent-products__swiper-wrapper');
      const noImage = `{{ 'no-image.webp' | asset_url }}`;
      const enableImageBlur = ('{{ settings.enable_img_blue_effect }}' === 'true');

      for (let index = 0; index < products.length; index++) {
        const product = products[index];

        if (+new Date(product.availableFrom) < +new Date() || product.availableFrom === '') {
          let firstlySelectedVariant = product.variants.find((variant) => variant.firstAvailable);
          if (!firstlySelectedVariant) firstlySelectedVariant = product.variants[0];
          const productTitle = product.title;
          const isFirstVariantPreordered = firstlySelectedVariant.inventoryPolicy === "continue" && firstlySelectedVariant.inventoryQuantity <= 0;
          let imagePrimaryUrl = (product.images[0]) ? product.images[0] : noImage;
          let imageHoverUrl = (product.images[1]) ? product.images[1] : noImage;
          const getImageUrlWithWidth = (originalUrl, width) => {
            const cleanedUrl = originalUrl.replace(/_(large|medium|small|grande|compact|thumbnail)\./, '.');
            const [urlPart, queryPart] = cleanedUrl.split('?');
            return `${urlPart}?width=${width}${queryPart ? '&' + queryPart : ''}`;
          }
          const imageWidth = 700;

          if (product.images[0]) {
            imagePrimaryUrl = getImageUrlWithWidth(imagePrimaryUrl, imageWidth);
          }
          if (product.images[1]) {
            imageHoverUrl = getImageUrlWithWidth(imageHoverUrl, imageWidth);
          }

          let imageUrlLazyLoad;

          if (enableImageBlur) {
            imageUrlLazyLoad = product.images[0].replace('_large', '_small');
          } else imageUrlLazyLoad = imagePrimaryUrl;

          const newProductHtml = `
            <div data-index=${index} data-swiper-slide-index="${index}" id="${product.productId}--${product.color}"
                 class="recent-products__slider-slide swiper-slide"
                 data-recent-product-item
                 data-active-variant="${firstlySelectedVariant.id}">
                 <div class="variant_inventory_policy disp-none-imp">
                 {% for variant in product.variants %}
                   <div data-variant-id-policy="{{ variant.id }}" data-variant-inventory-policy="{{ variant.inventory_policy }}"></div>
                 {% endfor %}
               </div>
              <div class="swiper-slide-container">
                <a href="${firstlySelectedVariant.url}" class="swiper-slide-link"></a>
                <div class="swiper-slide-image-container lazyLoad">
                  <div class="swiper-slide-image ${(enableImageBlur) ? "lazyLoad" : ""}"
                       data-bgimage="${imagePrimaryUrl}"
                       style="background-image: url('${imageUrlLazyLoad}'); ${enableImageBlur ?" filter: blur(2px)" : ""}"></div>

                  <div class="swiper-slide-image-info">
                    <div class="swiper-slide-image-info-sizes">
                      ${(product && product.variants &&
                        product.variants.map((variant) => {
                          if ((variant.inventoryPolicy === "continue") && variant.inventoryQuantity <= 0) {
                            return `<a href='${variant.url}' class="swiper-slide-image-info-sizes-item
                                    ${((variant.firstAvailable) ? ' selected-size' : '') ||
                            ((variant.available) ? '' : ' unavailable')}"
                                    data-size-item="${variant.id}"
                                    data-price="{{ cart.currency.symbol }}${variant.price}"
                                    data-is-preordered="${(variant.inventoryPolicy === "continue") && variant.inventoryQuantity <= 0}">
                              ${variant.size}
                             </a>`
                          } else {
                           return `<div class="swiper-slide-image-info-sizes-item
                                    ${((variant.firstAvailable) ? ' selected-size' : '') ||
                            ((variant.available) ? '' : ' unavailable')}"
                                    data-size-item="${variant.id}"
                                    data-price="{{ cart.currency.symbol }}${variant.price}"
                                    data-is-preordered="${(variant.inventoryPolicy === "continue") && variant.inventoryQuantity <= 0}">
                              ${variant.size ? variant.size : variant.title}
                             </div>`
                          }
                        }).join(""))
                      }
                    </div>
                    <a href="${firstlySelectedVariant.url}"
                       class="disp-none-imp swiper-slide-image-info-cart-button${(isFirstVariantPreordered) ? '': ' disp-none-imp'}"
                       data-see-more-preordered>
                      See more
                    </a>
                    <div class="disp-none-imp swiper-slide-image-info-cart-button${(isFirstVariantPreordered) ? ' disp-none-imp': ''}"
                         data-quick-add>
                        {{ section.settings.add_to_cart_text }}
                    </div>
                  </div>
                  <div class="swiper-slide-image-info-button">
                    {% render 'icon-plus', fill: '#8B8B8B', stroke: '#8B8B8B' %}
                  </div>
                  <input type="hidden" class="recent-products-swiper-first-image" value="${imagePrimaryUrl}" />
                  <input type="hidden" class="recent-products-swiper-second-image" value="${imageHoverUrl}" />
                </div>
                <div class="swiper-slide-text-container">
                  <div class="swiper-slide-title">${product.title}</div>
                  <div class="swiper-slide-title swiper-slide-title-price" data-current-price>
                    ${productTitle.includes('Gift Card')
                      ? `${product.color}`
                      : `{{ cart.currency.symbol }}${firstlySelectedVariant.price}`
                    }
                  </div>
                  <button class="preorder-button disp-none-imp">Preorder</button>
                </div>
              </div>
            </div>
          `;

          const newHtmlDocument = new DOMParser().parseFromString(newProductHtml, 'text/html')
          const productElem = newHtmlDocument.querySelector('div')
          wrapper.appendChild(productElem)
        }
      }

      const preorderButtons = document.querySelectorAll('.preorder-button')
      for (const button of preorderButtons) {
        button.addEventListener("click", (event) => {
          event.preventDefault()
          event.stopPropagation()
        })
      }
    }

    const products = getProductsFromLocalStorage()
    setUpSlides(products)
    if (products.length > 4) {
      const startEvent = new Event('dispatch:recently-products:init-slider');
      document.dispatchEvent(startEvent);
    }
  })
  </script>
</div>

{{ 'recent-products-swiper.js' | asset_url | script_tag }}

{% schema %}
{
  "name": "Recently viewed products",
  "class": "section-recent-products-slider",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section title",
      "default": "RECENTLY VIEWED"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add item to cart text",
      "default": "Add to bag"
    },

  ],
  "presets": [
    {
      "name": "Recent products"
    }
  ]
}
{% endschema %}
